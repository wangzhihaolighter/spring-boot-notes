<?xml version="1.0" encoding="UTF-8"?>
<!--
  logback官方文档：http://logback.qos.ch/
  日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出
  scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
  scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
  debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="10 seconds">

  <!-- 引入默认的logback配置文件 -->
  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

  <!--
      Environment Properties
      通过定义的值会被插入到logger上下文中，定义变量后，可以使“${}”来使用变量。
  -->
  <springProperty scope="context" name="APPLICATION_NAME" source="spring.application.name"/>
  <springProperty scope="context" name="LOG_HOME" source="logging.file.path"/>
  <property name="LOG_FILE" value="${APPLICATION_NAME}"/>

  <!--
    格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符

    %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
    %r:输出自应用启动到输出该日志讯息所耗费的毫秒数
    %t:输出产生该日志事件的线程名
    %f:输出日志讯息所属的类别的类别名
    %c:输出日志讯息所属的类的全名
    %d:输出日志时间点的日期或时间，指定格式的方式： %d{yyyy-MM-dd HH:mm:ss}
    %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。
    %m:输出代码中指定的讯息，如log(message)中的message
    %n:输出一个换行符号
  -->

  <!-- 常规日志 -->
  <property name="LOG_PATTERN"
    value="%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%15.15t] %-40.40logger{39} : %msg%n"/>

  <!--
    MDC填充日志：这里使用 %X{paramKey} 获取MDC填充的参数：%X{request_uri} %X{request_ip} %X{request_user_id}
  -->
  <property name="MDC_LOG_PATTERN"
    value="%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%15.15t] %X{request_uri} %X{request_ip} %X{request_user_id} %-40.40logger{39} : %msg%n"/>

  <!-- 彩色日志 -->
  <!-- 彩色日志依赖的渲染类 -->
  <conversionRule conversionWord="clr"
    converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
  <conversionRule conversionWord="wex"
    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
  <conversionRule conversionWord="wEx"
    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
  <!-- 彩色日志格式 -->
  <property name="COLOR_LOG_PATTERN"
    value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

  <!--
    Appender: 设置日志信息的去向,常用的有以下几个
        ch.qos.logback.core.ConsoleAppender (控制台)
        ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)
        ch.qos.logback.core.FileAppender (文件)
  -->

  <!-- Appender log to console -->
  <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
    <!-- 对记录事件进行格式化 -->
    <encoder>
      <pattern>${COLOR_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>

    <!-- ThresholdFilter：阀值过滤器，过滤阈值水平以下的事件。 -->
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>INFO</level>
    </filter>
  </appender>

  <!-- Appender log to file -->
  <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
    <file>${LOG_HOME}/${LOG_FILE}.log</file>

    <!-- 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--
        必要节点，包含文件名及"%d"转换符，"%d"可以包含一个java.text.SimpleDateFormat指定的时间格式，默认格式是 yyyy-MM-dd
        可以指定多个％d细节，但只有一个可以是主要的，即用于推断翻转期。通过传递“AUX”参数（参见下面的示例），所有其他令牌必须标记为辅助。
      -->
      <fileNamePattern>
        ${LOG_HOME}/%d{yyyy-MM-dd, aux}/${LOG_FILE}.%d{yyyy-MM-dd-HH-mm}.%i.log.gz
      </fileNamePattern>
      <!-- 单个文件最大大小，单位：KB、MB、GB -->
      <maxFileSize>1KB</maxFileSize>
      <!-- 可选节点，控制保留的归档文件滚动周期的最大数量，超出数量就删除旧文件。假设设置每个月滚动，如果是6，则只保存最近6个月的文件，删除之前的旧文件 -->
      <maxHistory>7</maxHistory>
      <!-- 总计最大大小，单位：KB、MB、GB -->
      <totalSizeCap>1MB</totalSizeCap>
      <!-- 重启清理日志文件 -->
      <cleanHistoryOnStart>true</cleanHistoryOnStart>
    </rollingPolicy>

    <!-- 对记录事件进行格式化 -->
    <encoder>
      <pattern>${LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>

    <!-- LevelFilter： 级别过滤器，根据日志级别进行过滤 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <!-- 用于配置符合过滤条件的操作 ACCEPT：匹配该级别及以上，日志会被立即处理，不再经过剩余过滤器 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 DENY：不匹配该级别以下，日志将立即被抛弃，不再经过其他过滤器 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- Appender log（JSON format） to file -->
  <appender name="json" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
    <file>${LOG_HOME}/${LOG_FILE}-json.log</file>

    <!-- 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!-- 必要节点，包含文件名及"%d"转换符，"%d"可以包含一个java.text.SimpleDateFormat指定的时间格式，默认格式是 yyyy-MM-dd -->
      <fileNamePattern>
        ${LOG_HOME}/%d{yyyy-MM-dd, aux}/${LOG_FILE}-json.%d{yyyy-MM-dd-HH-mm}.%i.log.gz
      </fileNamePattern>
      <!-- 单个文件最大大小，单位：KB、MB、GB -->
      <maxFileSize>1KB</maxFileSize>
      <!-- 可选节点，控制保留的归档文件滚动周期的最大数量，超出数量就删除旧文件。假设设置每个月滚动，如果是6，则只保存最近6个月的文件，删除之前的旧文件 -->
      <maxHistory>7</maxHistory>
      <!-- 总计最大大小 -->
      <totalSizeCap>1MB</totalSizeCap>
      <!-- 重启清理日志文件 -->
      <cleanHistoryOnStart>true</cleanHistoryOnStart>
    </rollingPolicy>

    <!-- 对记录事件进行格式化，这里使用logstash提供的Json格式化类 -->
    <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
      <providers>
        <mdc/>
        <timestamp>
          <timeZone>GMT+8</timeZone>
        </timestamp>
        <pattern>
          <pattern>
            {
            "level": "%level",
            "application": "${APPLICATION_NAME:-}",
            "pid": "${PID:-}",
            "thread": "%thread",
            "class": "%logger{40}",
            "column": "%F:%L",
            "message": "%message"
            }
          </pattern>
        </pattern>
      </providers>
    </encoder>

    <!-- LevelFilter： 级别过滤器，根据日志级别进行过滤 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <!-- 用于配置符合过滤条件的操作 ACCEPT：匹配该级别及以上，日志会被立即处理，不再经过剩余过滤器 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 DENY：不匹配该级别以下，日志将立即被抛弃，不再经过其他过滤器 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- Appender biz log to file -->
  <appender name="biz-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 -->
    <file>${LOG_HOME}/${LOG_FILE}-biz.log</file>

    <!-- 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。属性class定义具体的滚动策略类 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--
        必要节点，包含文件名及"%d"转换符，"%d"可以包含一个java.text.SimpleDateFormat指定的时间格式，默认格式是 yyyy-MM-dd
        可以指定多个％d细节，但只有一个可以是主要的，即用于推断翻转期。通过传递“AUX”参数（参见下面的示例），所有其他令牌必须标记为辅助。
      -->
      <fileNamePattern>
        ${LOG_HOME}/%d{yyyy-MM-dd, aux}/${LOG_FILE}-biz.%d{yyyy-MM-dd-HH-mm}.%i.log.gz
      </fileNamePattern>
      <!-- 单个文件最大大小，单位：KB、MB、GB -->
      <maxFileSize>1KB</maxFileSize>
      <!-- 可选节点，控制保留的归档文件滚动周期的最大数量，超出数量就删除旧文件。假设设置每个月滚动，如果是6，则只保存最近6个月的文件，删除之前的旧文件 -->
      <maxHistory>7</maxHistory>
      <!-- 总计最大大小，单位：KB、MB、GB -->
      <totalSizeCap>1MB</totalSizeCap>
      <!-- 重启清理日志文件 -->
      <cleanHistoryOnStart>true</cleanHistoryOnStart>
    </rollingPolicy>

    <!-- 对记录事件进行格式化 -->
    <encoder>
      <pattern>${MDC_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>

    <!-- LevelFilter： 级别过滤器，根据日志级别进行过滤 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>INFO</level>
      <!-- 用于配置符合过滤条件的操作 ACCEPT：匹配该级别及以上，日志会被立即处理，不再经过剩余过滤器 -->
      <onMatch>ACCEPT</onMatch>
      <!-- 用于配置不符合过滤条件的操作 DENY：不匹配该级别以下，日志将立即被抛弃，不再经过其他过滤器 -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!--
    <logger>：用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
      可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
      仅有一个name属性，一个可选的level和一个可选的additivity属性。
        name:
          用来指定受此logger约束的某一个包或者具体的某一个类。
        level:
          用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF。
        additivity:
          默认是true，子Logger是否继承父Logger的输出源（appender）的标志位

    <root>：<logger>元素，但是它是根logger，默认level为debug。
  -->

  <root level="ALL">
    <appender-ref ref="console"/>
    <appender-ref ref="file"/>
    <appender-ref ref="json"/>
  </root>

  <logger name="org.springframework" level="WARN" additivity="true"/>

  <logger name="BIZ" level="ALL" additivity="false">
    <appender-ref ref="console"/>
    <appender-ref ref="biz-file"/>
  </logger>

</configuration>